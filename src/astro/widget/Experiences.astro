---
import { useTranslations } from "src/i18n/utils";
import { numAdjCss } from "src/styles/component-css";
import ExpCard from "src/astro/components/ExpCard.astro";
import type { ExpKey } from "src/i18n/exp-string";

type Props = {};

type ExpTabList = {
    id: string;
    tabCaption: string;
    header: string;
    expKeyList: ExpKey[];
};

const lang = Astro.currentLocale as Lang;
const t = useTranslations(lang);

const projectTabs: ExpTabList[] = [
    {
        id: "exp2025",
        tabCaption: t("exp.tab.2025"),
        header: t("exp.tab.2025.header"),
        expKeyList: [
            "20250090",
            "20250080",
            "20250070",
            "20250060",
            "20250050",
            "20250040",
            "20250030",
            "20250020",
            "20250010",
        ],
    },
    {
        id: "exp2023",
        tabCaption: t("exp.tab.2023"),
        header: t("exp.tab.2023.header"),
        expKeyList: [
            "20230070",
            "20230060",
            "20230050",
            "20230040",
            "20230020",
            "20230010",
        ],
    },
    {
        id: "exp2021",
        tabCaption: t("exp.tab.2021"),
        header: t("exp.tab.2021.header"),
        expKeyList: [
            "20210090",
            "20210080",
            "20210070",
            "20210060",
            "20210040",
            "20210030",
            "20210020",
            "20210010",
        ],
    },
    {
        id: "exp2017",
        tabCaption: t("exp.tab.2017"),
        header: t("career.1.content"),
        expKeyList: [
            "20170080",
            "20170070",
            "20170060",
            "20170050",
            "20170030",
            "20170020",
            "20170010",
        ],
    },
    {
        id: "exp2015",
        tabCaption: t("exp.tab.2015"),
        header: t("career.2.content"),
        expKeyList: [
            "20150070",
            "20150060",
            "20150050",
            "20150040",
            "20150030",
            "20150020",
            "20150010",
        ],
    },
];
---

<div id="expWrapper">
    <div
        id="tabButtonWrapper"
        class="projects-tab-button-wrapper"
        role="tablist"
        data-print-hidden
    >
        {
            projectTabs.map((tab, id) => (
                <button
                    type="button"
                    class:list={[
                        "tab-button",
                        numAdjCss,
                        id === 0 && "is-active",
                    ]}
                    data-tab-id={tab.id}
                    data-tab-index={id}
                >
                    {tab.tabCaption}
                </button>
            ))
        }
    </div>
    <div id="tabContents" class="tab-contents">
        {
            projectTabs.map((tab) => (
                <div id={tab.id} class:list={["tab-content"]}>
                    <header class="tab-contents-header">{tab.header}</header>
                    <ol class="tab-card-list">
                        {tab.expKeyList.map((expId) => (
                            <ExpCard expId={expId} />
                        ))}
                    </ol>
                </div>
            ))
        }
    </div>
</div>

<script>
    const expHeader = document.getElementById("experiences")!;
    const expWrapper = document.getElementById("expWrapper")!;
    const tabButtonWrapper = document.getElementById("tabButtonWrapper")!;
    const tabContentsWrapper = document.getElementById("tabContents")!;
    const tabContents = [
        ...tabContentsWrapper.querySelectorAll(".tab-content"),
    ] as HTMLElement[];
    const tabButtons = [
        ...tabButtonWrapper.querySelectorAll("button"),
    ] as HTMLElement[];

    tabButtonWrapper.addEventListener("click", (ev) => {
        const target = ev.target as HTMLElement;
        const element = target.closest("[data-tab-id]") as HTMLElement;

        if (!element) return;

        const tabId = parseInt(
            element.getAttribute("data-tab-index") || "0",
            10,
        );

        activeTabButton(tabId);
    });

    const defaultTabId = getDefaultTabId();

    activeTabButton(defaultTabId, defaultTabId !== 0);

    function activeTabButton(tabId: number, moveScroll = true) {
        // reset is-active
        tabButtons.forEach((el) => el.classList.remove("is-active"));
        tabButtons[tabId].classList.add("is-active");

        if (moveScroll)
            expHeader.scrollIntoView({
                behavior: "smooth",
                block: "nearest",
            });
        expWrapper.style.setProperty("--active-tab-index", `${tabId}`);
        expWrapper.style.setProperty(
            "--tab-max-height",
            `${tabContents[tabId].scrollHeight}px`,
        );
    }

    function getDefaultTabId() {
        const urlHash = location.hash.slice(1);

        if (urlHash) {
            const findIndex = tabContents.findIndex(
                (element) => element.id === urlHash,
            );

            return findIndex !== -1 ? findIndex : 0;
        }

        return 0;
    }
</script>

<style>
    :root {
        --tab-button-width: 64px;
        --tab-button-gap: 4px;
        --tab-ani-duration: 0.5s;
    }

    .projects-tab-button-wrapper {
        position: sticky;
        top: 0;
        z-index: 2000;
        padding: 0.5rem 0;
        display: flex;
        column-gap: var(--tab-button-gap);
        align-items: end;
        margin-left: calc(var(--spacing-doc-pad-left) * -1);
        margin-right: calc(var(--spacing-doc-pad-right) * -1);
        padding-left: calc(var(--spacing-doc-pad-left) - 0.6rem);
        background-color: var(--colors-background-light);

        & > li {
            display: contents;
        }

        &::before {
            transition: all var(--tab-ani-duration) ease-in-out;
            content: "";
            position: absolute;
            top: 0.25rem;
            left: calc(
                -0.6rem + var(--spacing-doc-pad-left) + (var(--active-tab-index) *
                            (var(--tab-button-width) + var(--tab-button-gap)))
            );
            width: calc(var(--tab-button-width));
            bottom: 0.25rem;
            background-color: var(--colors-accent-o10);
            border-radius: 0.5rem;
        }
    }

    .project-year-group {
        margin: 0.5rem 0;
    }

    .tab-contents-header {
        padding-bottom: 0.5rem;
        padding-left: var(--spacing-doc-pad-left);
        font-weight: 500;
        font-size: 1.125rem;
        opacity: 0.9;
        border-bottom: 4px solid var(--colors-background);
    }

    .tab-content {
        transition: margin-left var(--tab-ani-duration) ease-in-out;
        min-width: 100%;

        &:first-child {
            margin-left: calc(var(--active-tab-index) * -100%);
        }
    }

    .tab-contents {
        transition: max-height var(--tab-ani-duration) ease-in-out;
        display: flex;
        overflow: hidden;
        scrollbar-width: none;
        align-items: flex-start;
        z-index: 0;
        width: calc(
            100% + var(--spacing-doc-pad-right) + var(--spacing-doc-pad-left)
        );
        margin-left: calc(var(--spacing-doc-pad-left) * -1);
        max-height: var(--tab-max-height);
    }

    .tab-button {
        white-space: nowrap;
        text-overflow: ellipsis;
        overflow: hidden;
        display: inline-block;
        transition: all 0.25s ease-in-out;
        opacity: 0.5;
        cursor: pointer;
        text-align: center;
        border-radius: 4px;
        z-index: 10;
        width: var(--tab-button-width);

        &:hover {
            opacity: 0.8;
        }

        &.is-active {
            opacity: 1;
        }
    }

    .tab-card-list {
        display: flex;
        flex-direction: column;
    }

    @media print {
        .tab-contents {
            flex-direction: column;
            max-height: fit-content;
        }

        .tab-content {
            transition: none;
            margin-left: 0;
        }

        .tab-contents-header {
            display: none;
        }
    }
</style>
