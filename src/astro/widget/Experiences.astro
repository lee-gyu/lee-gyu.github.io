---
import { useTranslations } from "src/i18n/utils";
import ExpCard from "src/astro/components/ExpCard.astro";
import type { ExpKey } from "src/i18n/exp-string";
import IconButton from "../components/IconButton.astro";

type Props = {};

type ExpTabList = {
    id: string;
    tabCaption: string;
    expKeyList: ExpKey[];
    desc: string;
};

const lang = Astro.currentLocale as Lang;
const t = useTranslations(lang);

const printVisibleSet = new Set([
    "20250110", // 솔루션 AI 기능 개발
    "20250100", // 다국어 통합 관리 시스템
    "20250090", // 커스터마이징 모듈
    "20250080", // Dark Mode Theme
    "20240010", // 테스팅
    "20250010", // PageContainer
    "20230070", // 제품간 호출 프로토콜
    "20230015", // Grid
    "20210080", // 웹 개발 환경
    "20210070", // Flowchart

    "20250040", // 채용
    "20230020", // CM Calendar
    "20230010", // Icon CSS
    "20210090", // UI 스타일 리뉴얼
    "20210060", // RPA

    "20180050", // IoT
    "20180030", // 관제
    "20180020", // 업무 시스템
    "20150070", // 지도위원
    "20150030", // 훈련
]);

const projectTabs: ExpTabList[] = [
    {
        id: "exp_primary",
        tabCaption: t("exp.tab.primary"),
        desc: t("exp.tab.primary.desc"),
        expKeyList: [
            "20250110", // 솔루션 AI 기능 개발
            "20210080", // 웹 개발 환경
            "20250100", // 다국어 통합 관리 시스템
            "20250080", // Dark Mode Theme
            "20240010", // 테스팅
            "20250090", // 커스터마이징 모듈
            "20230015", // Grid
            "20210090", // UI 스타일 리뉴얼
        ],
    },
    {
        id: "exp_secondary",
        tabCaption: t("exp.tab.secondary"),
        desc: t("exp.tab.secondary.desc"),
        expKeyList: [
            "20250010", // PageContainer
            "20250020", // IRTreeView
            "20230070", // 제품간 호출 프로토콜
            "20250040", // 채용
            "20250050", // 온라인 코딩 테스트
            "20230080", // 휴가계 리뉴얼
            "20230020", // CM Calendar
            "20230010", // Icon CSS
            "20210070", // Flowchart
            "20210060", // RPA
        ],
    },
    {
        id: "exp_etc",
        tabCaption: t("exp.tab.etc"),
        desc: t("exp.tab.etc.desc"),
        expKeyList: [
            "20200010", // 어학연수
            "20190010", // 학교 강사 활동
            "20180055", // SW 써티
            "20180070", // 공정 프로세스
            "20180050", // IoT
            "20180030", // 관제
            "20180020", // 업무 시스템
            "20150070", // 지도위원
            "20150030", // 훈련
        ],
    },
];
---

<div id="expWrapper">
    <div
        id="tabButtonWrapper"
        class="projects-tab-button-wrapper"
        role="tablist"
        data-print-hidden
    >
        {
            projectTabs.map((tab, id) => (
                <button
                    type="button"
                    class:list={["tab-button", id === 0 && "is-active"]}
                    data-tab-id={tab.id}
                    data-tab-index={id}
                >
                    {tab.tabCaption}
                </button>
            ))
        }
    </div>
    <div id="tabContents" class="tab-contents">
        {
            projectTabs.map((tab, id) => (
                <div id={tab.id} class:list={["tab-content"]}>
                    <h4 class="tab-caption" data-only-print="block">
                        {tab.desc}
                    </h4>
                    <ol class="tab-card-list">
                        {tab.expKeyList.map((expId) => (
                            <ExpCard
                                expId={expId}
                                printHidden={!printVisibleSet.has(expId)}
                            />
                        ))}
                    </ol>
                </div>
            ))
        }
    </div>
    <nav id="tabNav">
        <IconButton icon="gr-form-prev" name="prev" />
        <IconButton icon="gr-form-next" name="next" />
    </nav>
</div>

<script>
    import { addFilteredClickEv } from "src/utils/dom";

    const tabNav = document.getElementById("tabNav")!;
    const expWrapper = document.getElementById("expWrapper")!;
    const tabButtonWrapper = document.getElementById("tabButtonWrapper")!;
    const tabContentsWrapper = document.getElementById("tabContents")!;
    const tabContents = [
        ...tabContentsWrapper.querySelectorAll(".tab-content"),
    ] as HTMLElement[];
    const tabButtons = [
        ...tabButtonWrapper.querySelectorAll("button"),
    ] as HTMLElement[];

    addFilteredClickEv(tabButtonWrapper, "[data-tab-index]", (ev) => {
        const tabId = parseInt(
            ev.target.getAttribute("data-tab-index") || "0",
            10,
        );

        activeTabButton(tabId);
    });

    addFilteredClickEv(tabNav, "[data-btn-name]", (ev) => {
        activeTabButton(
            getCurrentTabId() +
                (ev.target.closest("[data-btn-name='prev']") ? -1 : 1),
        );
    });

    const defaultTabId = getDefaultTabId();

    activeTabButton(defaultTabId, defaultTabId !== 0);

    function getCurrentTabId() {
        return parseInt(
            expWrapper.style.getPropertyValue("--active-tab-index") ?? "0",
            10,
        );
    }

    function activeTabButton(tabId: number, moveScroll = true) {
        // reset is-active
        tabButtons.forEach((el) => el.classList.remove("is-active"));
        tabContents.forEach((el) => el.classList.remove("is-active"));
        tabButtons[tabId].classList.add("is-active");
        tabContents[tabId].classList.add("is-active");

        if (moveScroll)
            window.scrollTo({
                top: tabContentsWrapper.offsetTop - 41,
                behavior: "smooth",
            });
        expWrapper.style.setProperty("--active-tab-index", `${tabId}`);
        tabNav.setAttribute("data-invisible-first", `${tabId === 0}`);
        tabNav.setAttribute(
            "data-invisible-last",
            `${tabId === tabContents.length - 1}`,
        );
    }

    function getDefaultTabId() {
        const urlHash = location.hash.slice(1);

        if (urlHash) {
            const findIndex = tabContents.findIndex(
                (element) => element.id === urlHash,
            );

            return findIndex !== -1 ? findIndex : 0;
        }

        return 0;
    }
</script>

<style>
    :root {
        --tab-button-width: 84px;
        --tab-button-gap: 4px;
        --tab-button-offset: -12px;
        --tab-ani-duration: 0.5s;
    }

    .projects-tab-button-wrapper {
        position: sticky;
        top: 0;
        z-index: 2000;
        padding: 0.5rem 0;
        display: flex;
        column-gap: var(--tab-button-gap);
        align-items: end;
        margin-left: calc(var(--spacing-doc-pad-left) * -1);
        margin-right: calc(var(--spacing-doc-pad-right) * -1);
        padding-left: calc(
            var(--spacing-doc-pad-left) + var(--tab-button-offset)
        );
        background-color: var(--colors-background-light);
        border-bottom: 1px solid var(--colors-background);

        & > li {
            display: contents;
        }

        &::before {
            transition: all var(--tab-ani-duration) ease-in-out;
            content: "";
            position: absolute;
            top: 0.25rem;
            left: calc(
                var(--tab-button-offset) + var(--spacing-doc-pad-left) +
                    (
                        var(--active-tab-index) *
                            (var(--tab-button-width) + var(--tab-button-gap))
                    )
            );
            width: calc(var(--tab-button-width));
            bottom: 0.25rem;
            background-color: var(--colors-accent-o20);
            border-radius: 0.5rem;
        }
    }

    .project-year-group {
        margin: 0.5rem 0;
    }

    .tab-content {
        page-break-before: always;
        transition: margin-left var(--tab-ani-duration) ease-in-out;
        min-width: 100%;

        &:first-child {
            margin-left: calc(var(--active-tab-index) * -100%);
        }

        &:not(.is-active) {
            max-height: 0;
        }
    }

    .tab-contents {
        background-color: var(--colors-background);
        display: flex;
        scrollbar-width: none;
        align-items: flex-start;
        overflow: hidden;
        width: calc(
            100% + var(--spacing-doc-pad-right) + var(--spacing-doc-pad-left)
        );
        margin-left: calc(var(--spacing-doc-pad-left) * -1);
    }

    .tab-button {
        white-space: nowrap;
        text-overflow: ellipsis;
        overflow: hidden;
        display: inline-block;
        transition: all 0.25s ease-in-out;
        opacity: 0.5;
        cursor: pointer;
        text-align: center;
        border-radius: 4px;
        z-index: 10;
        width: var(--tab-button-width);

        &:hover {
            opacity: 0.8;
        }

        &.is-active {
            opacity: 1;
        }
    }

    .tab-card-list {
        display: flex;
        flex-direction: column;
        row-gap: 0.5rem;
    }

    .btn-next {
        cursor: pointer;
        position: absolute;
        bottom: -0.5rem;
        right: 1rem;
    }

    #tabNav {
        display: flex;
        justify-content: center;
        gap: 0.25rem;
        margin-left: calc(var(--spacing-doc-pad-left) * -1);
        margin-right: calc(var(--spacing-doc-pad-right) * -1);
    }

    .tab-caption {
        padding: 0.25rem var(--spacing-doc-pad-left);
        font-weight: 500;
    }

    .hidden-info {
        padding-left: var(--spacing-doc-pad-left);
        font-size: 0.875rem;
        opacity: 0.75;
    }

    @media print {
        .tab-contents {
            flex-direction: column;
            max-height: fit-content;
        }

        .tab-content {
            transition: none;
            margin-left: 0;
        }

        .tab-contents-header {
            display: none;
        }

        #tabNav {
            display: none;
        }

        .tab-card-list {
            row-gap: 0.25rem;
        }
    }
</style>
