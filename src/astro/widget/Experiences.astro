---
import { useTranslations, type ExpKeyPrefix } from "src/i18n/utils";
import { numAdjCss } from "src/styles/component-css";
import ExpCard from "src/astro/components/ExpCard.astro";

type Props = {};

type ExpTabList = {
    id: string;
    tabCaption: string;
    header: string;
    expList: ExpKeyPrefix[];
};

const lang = Astro.currentLocale as Lang;
const t = useTranslations(lang);

const projectTabs: ExpTabList[] = [
    {
        id: "exp2025",
        tabCaption: t("exp.tab.2025"),
        header: t("career.0.content"),
        expList: [],
    },
    {
        id: "exp2020",
        tabCaption: t("exp.tab.2020"),
        header: t("exp.tab.2020.header"),
        expList: [],
    },
    {
        id: "exp2018",
        tabCaption: t("exp.tab.2018"),
        header: t("career.1.content"),
        expList: ["7", "6", "5"],
    },
    {
        id: "exp2015",
        tabCaption: t("exp.tab.2015"),
        header: t("career.2.content"),
        expList: ["4", "3", "2", "1", "0"],
    },
];
---

<div class="project-contents-wrapper">
    <ol
        id="tabButtonWrapper"
        class="projects-tab-wrapper"
        role="tablist"
        data-print-hidden
    >
        {
            projectTabs.map((tab, id) => (
                <li>
                    <a
                        href={`#${tab.id}`}
                        class:list={[
                            "tab-button",
                            numAdjCss,
                            id === 0 && "is-active",
                        ]}
                        data-tab-id={tab.id}
                        data-tab-index={id}
                    >
                        {tab.tabCaption}
                    </a>
                </li>
            ))
        }
    </ol>
    <div id="tabContents" class="tab-contents">
        {
            projectTabs.map((tab) => (
                <div id={tab.id} class="tab-content">
                    <header class="tab-contents-header">{tab.header}</header>
                    <ol>
                        {tab.expList.map((expId) => (
                            <ExpCard expId={expId} />
                        ))}
                    </ol>
                </div>
            ))
        }
    </div>
</div>

<script>
    const tabButtonWrapper = document.getElementById("tabButtonWrapper")!;
    const tabContentsWrapper = document.getElementById("tabContents")!;
    const tabContents = [
        ...tabContentsWrapper.querySelectorAll(".tab-content"),
    ] as HTMLElement[];

    tabButtonWrapper.addEventListener("click", (ev) => {
        const target = ev.target as HTMLElement;
        const element = target.closest("[data-tab-id]") as HTMLElement;

        if (!element) return;

        const tabId = parseInt(
            element.getAttribute("data-tab-index") || "0",
            10,
        );

        activeTabButton(tabId);
        scrollTabContent(tabId);
        history.pushState({}, "", `#${element.getAttribute("data-tab-id")}`);
        ev.preventDefault();
    });

    const defaultTabId = getDefaultTabId();

    activeTabButton(defaultTabId);
    if (defaultTabId > 0) setTimeout(() => scrollTabContent(defaultTabId), 0);

    tabContents.forEach((element) => {
        const header = element.querySelector("header")!;

        new IntersectionObserver(([entry]) => {
            console.log(element.id, entry, entry.isIntersecting);
        }).observe(header);
    });

    function activeTabButton(tabId: number) {
        // reset is-active
        const buttons = [
            ...tabButtonWrapper.querySelectorAll(".tab-button"),
        ] as HTMLElement[];

        buttons.forEach((button) => {
            button.classList.remove("is-active");
        });

        const activeButton = buttons[tabId];

        activeButton.classList.add("is-active");
        tabButtonWrapper.style.setProperty("--active-tab-index", `${tabId}`);
    }

    function scrollTabContent(tabId: number) {
        tabContentsWrapper.scrollTo({
            behavior: "smooth",
            left: tabContents[tabId].offsetLeft,
        });
    }

    function getDefaultTabId() {
        const hash = window.location.hash;
        const projectTabs = [
            ...tabButtonWrapper.querySelectorAll("[data-tab-id]"),
        ] as HTMLElement[];

        if (hash) {
            const tabId = projectTabs.findIndex(
                (tab) => `#${tab.dataset.tabId}` === hash,
            );

            if (tabId >= 0) return tabId;
        }

        return 0;
    }
</script>

<style>
    :root {
        --tab-button-width: 72px;
        --tab-button-gap: 4px;
    }

    .projects-tab-wrapper {
        position: sticky;
        top: 0;
        left: 0;
        margin: 0.5rem 0;
        display: flex;
        column-gap: var(--tab-button-gap);
        align-items: end;
        z-index: 1000;
        margin-left: -0.75rem;

        & > li {
            display: contents;
        }

        &::before {
            transition: all 0.5s ease-in-out;
            content: "";
            position: absolute;
            top: -0.25rem;
            left: calc(
                var(--active-tab-index) *
                    (var(--tab-button-width) + var(--tab-button-gap))
            );
            width: calc(var(--tab-button-width));
            bottom: -0.25rem;
            background-color: var(--colors-accent-o10);
            border-radius: 0.5rem;
        }
    }

    .project-year-group {
        margin: 0.5rem 0;
    }

    .tab-contents-header {
        position: sticky;
        top: 0;
        margin-left: var(--spacing-doc-pad-left);
        font-weight: 500;
        opacity: 0.75;
    }

    .tab-content {
        min-width: 100%;
        scroll-snap-align: start;
        scroll-behavior: smooth;
    }

    .tab-contents {
        width: calc(
            100% + var(--spacing-doc-pad-left) + var(--spacing-doc-pad-right)
        );
        display: flex;
        overflow-x: auto;
        scroll-snap-type: x mandatory;
        margin-left: calc(var(--spacing-doc-pad-left) * -1);
        scrollbar-width: none;
    }

    @media print {
        .tab-contents {
            flex-direction: column;
        }
    }

    .tab-button {
        white-space: nowrap;
        text-overflow: ellipsis;
        overflow: hidden;
        display: inline-block;
        transition: all 0.15s ease-in-out;
        opacity: 0.5;
        cursor: pointer;
        text-align: center;
        border-radius: 4px;
        z-index: 1000;
        width: var(--tab-button-width);

        &:hover {
            opacity: 0.8;
        }

        &.is-active {
            opacity: 1;
        }
    }
</style>
