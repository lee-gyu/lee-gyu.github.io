---
---

<div class="bg-art">
    <canvas id="artCanvas" width="240" height="1280"></canvas>
</div>

<style>

.bg-art {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    pointer-events: none;
    display: flex;

    justify-content: flex-start;
    align-items: flex-end;
}

canvas {
    transform: scaleY(-1);
    height: 100%;
}

</style>

<script>

type Branch = {
    x: number;
    y: number;
    toX: number;
    toY: number;
    maxLength: number;
    seq: number;
    cur: number;
}

(function setup() {
    const canvas = document.getElementById("artCanvas") as HTMLCanvasElement;

    if (!canvas) {
        console.warn("no canvas found.");
        return;
    }

    const ctx = canvas.getContext("2d", {
        alpha: true
    });

    if (!ctx) {
        console.warn("no 2d context found.");
        return;
    }

    // anti-aliasing
    ctx.imageSmoothingEnabled = true;

    // draw white line
    ctx.strokeStyle = "#343434";
    ctx.lineWidth = 1;

    const unit = 32;
    const speed = 1;
    const branchList: Branch[] = [
        {
            seq: 0,
            x: 0,
            y: 0,
            toX: unit,
            toY: unit,
            maxLength: 100 / speed,
            cur: 0
        }
    ];

    const next = () => {
        branchList.forEach(drawLine);
        requestAnimationFrame(next);
    }

    const createNewBranchFrom = (branch: Branch): Branch => {
        const nextSeq = branch.seq + 1;
        const sign = nextSeq % 2 === 0 ? 1 : -1;
        let startX = branch.toX;
        let startY = branch.toY;

        // init
        if (nextSeq === 40) {
            startX += unit;
        }
        else if (nextSeq === 80) {
            startX -= unit;
        }

        // set target
        let targetX = startX;
        let targetY = startY;

        if (nextSeq < 40) {
            targetX += unit * sign;
            targetY += unit;
        }
        else if (nextSeq < 80) {
            targetX -= unit * sign;
            targetY -= unit;
        }

        return {
            x: startX,
            y: startY,
            toX: targetX,
            toY: targetY,
            seq: nextSeq,
            maxLength: 100 / speed,
            cur: 0
        };
    }

    const drawLine = ( branch: Branch ) =>
    {
        if (branch.cur >= branch.maxLength) return;

        ++branch.cur;

        const percent = branch.cur / branch.maxLength;
        const curX = branch.x + (branch.toX - branch.x) * percent;
        const curY = branch.y + (branch.toY - branch.y) * percent;

        ctx.beginPath();
        ctx.moveTo(branch.x, branch.y);
        ctx.lineTo(curX, curY);
        ctx.stroke();

        if (branch.cur === branch.maxLength) {
            if (branch.seq >= 80) return;

            branchList.pop();
            branchList.push(createNewBranchFrom(branch));
        }
    }

    requestAnimationFrame(next);
})();


</script>